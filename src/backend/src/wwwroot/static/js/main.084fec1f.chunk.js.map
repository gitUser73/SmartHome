{"version":3,"sources":["api/api.ts","SimpleTemperature.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_PATH","replace","BaseAPI","configuration","basePath","fetch","portableFetch","this","RequiredError","field","msg","name","Error","TemperatureApiFetchParamCreator","getCurrentTemperature","options","localVarPath","localVarUrlObj","url","localVarRequestOptions","Object","assign","method","localVarHeaderParameter","localVarQueryParameter","query","search","headers","setCurrentTemperature","body","undefined","needsSerialization","JSON","stringify","TemperatureApiFp","localVarFetchArgs","then","response","status","json","TemperatureApi","SimpleTemperature","useState","temperature","setTemperature","temperatureApi","useEffect","interval","setInterval","result","clearInterval","map","data","valueC","valueF","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.084fec1f.chunk.js","sourcesContent":["/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * SmartHomeApi\n * Documentation of all Api-Calls the SmartHome Backend can handle.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nimport * as url from \"url\";\nimport * as portableFetch from \"portable-fetch\";\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"http://192.168.178.55:5000/v1\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name!: \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface TemperatureData\n */\nexport interface TemperatureData {\n    /**\n     * \n     * @type {number}\n     * @memberof TemperatureData\n     */\n    valueC?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TemperatureData\n     */\n    valueF?: number;\n}\n\n\n/**\n * TemperatureApi - fetch parameter creator\n * @export\n */\nexport const TemperatureApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Gets the last emmited Temperature.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentTemperature(options: any = {}): FetchArgs {\n            const localVarPath = `/temperature/getCurrentTemperature`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Emmit a change in the current temperature\n         * @param {TemperatureData} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setCurrentTemperature(body: TemperatureData, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setCurrentTemperature.');\n            }\n            const localVarPath = `/temperature/setCurrentTemperature`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"TemperatureData\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * TemperatureApi - functional programming interface\n * @export\n */\nexport const TemperatureApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Gets the last emmited Temperature.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentTemperature(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TemperatureData> {\n            const localVarFetchArgs = TemperatureApiFetchParamCreator(configuration).getCurrentTemperature(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Emmit a change in the current temperature\n         * @param {TemperatureData} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setCurrentTemperature(body: TemperatureData, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = TemperatureApiFetchParamCreator(configuration).setCurrentTemperature(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * TemperatureApi - factory interface\n * @export\n */\nexport const TemperatureApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @summary Gets the last emmited Temperature.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentTemperature(options?: any) {\n            return TemperatureApiFp(configuration).getCurrentTemperature(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Emmit a change in the current temperature\n         * @param {TemperatureData} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setCurrentTemperature(body: TemperatureData, options?: any) {\n            return TemperatureApiFp(configuration).setCurrentTemperature(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * TemperatureApi - object-oriented interface\n * @export\n * @class TemperatureApi\n * @extends {BaseAPI}\n */\nexport class TemperatureApi extends BaseAPI {\n    /**\n     * \n     * @summary Gets the last emmited Temperature.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TemperatureApi\n     */\n    public getCurrentTemperature(options?: any) {\n        return TemperatureApiFp(this.configuration).getCurrentTemperature(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Emmit a change in the current temperature\n     * @param {TemperatureData} body Pet object that needs to be added to the store\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TemperatureApi\n     */\n    public setCurrentTemperature(body: TemperatureData, options?: any) {\n        return TemperatureApiFp(this.configuration).setCurrentTemperature(body, options)(this.fetch, this.basePath);\n    }\n\n}\n\n","import React, {useState, useEffect} from 'react';\r\nimport { TemperatureApi, TemperatureApiFp, TemperatureData } from './api/api';\r\n\r\n\r\nexport const SimpleTemperature = () => {\r\n    const [temperature, setTemperature] = useState<TemperatureData[]>([]);\r\n\r\n    const temperatureApi = new TemperatureApi();\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            temperatureApi.getCurrentTemperature().then(result => setTemperature([...temperature, result]));}, 1000)\r\n        return () => clearInterval(interval);\r\n      }, []);\r\n\r\n    return (\r\n        <div>\r\n            {temperature.map(data => (\r\n                \"valueC: \" + data.valueC + \"\\nvalueF: \" + data.valueF\r\n            ))}    \r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SimpleTemperature } from './SimpleTemperature';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SimpleTemperature />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}