/*
 * SmartHomeApi
 *
 * Documentation of all Api-Calls the SmartHome Backend can handle.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using backend.src.Services;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TemperatureApiController : ControllerBase
    { 
		private readonly TemperatureService _temperatureService;

		public TemperatureApiController(TemperatureService temperatureService)
		{
			_temperatureService = temperatureService;
		}

        /// <summary>
        /// Gets the last emmited Temperature.
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/v1/temperature/getCurrentTemperature")]
        [ValidateModelState]
        [SwaggerOperation("GetCurrentTemperature")]
        [SwaggerResponse(statusCode: 200, type: typeof(TemperatureData), description: "OK")]
        public virtual IActionResult GetCurrentTemperature()
        { 
            
            var data = _temperatureService.getCurrentTemperature();

            return new ObjectResult(data);
        }

        /// <summary>
        /// Emmit a change in the current temperature
        /// </summary>
        
        /// <param name="body">Pet object that needs to be added to the store</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/v1/temperature/setCurrentTemperature")]
        [ValidateModelState]
        [SwaggerOperation("SetCurrentTemperature")]
        public virtual IActionResult SetCurrentTemperature([FromBody]TemperatureData body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            _temperatureService.setCurrentTemperature(body);

            throw new NotImplementedException();
        }
    }
}
